function CY = imuieq(varargin)

if ~ischar(varargin{1})
	Action = '::::BuildGUI';
 	CX = varargin{1};
	CPREV = thumb(CX, 150);
	if isgray(CPREV)
		CPREV = cat(3, CPREV, CPREV, CPREV);
	end
else
	Action = varargin{1};
	ud = get(gcf, 'UserData');
end

switch Action
case '::::BuildGUI'
	[L, x] = imhist(CX, 256);
	ud.fig = figure( ...
		'Position',			[0 0 740 500], ...
		'Name',				'Equalizer', ...
		'BackingStore',		'on', ...
		'Menubar',			'none', ...
		'NumberTitle',		'off', ...
		'Resize',			'off', ...
		'HandleVisibility', 'on', ...
		'WindowStyle',		'modal', ...
		'Interruptible', 	'off', ...
		'Visible',			'off');
	%%%%Build Context-Menu
	ud.cmnu = uicontextmenu( 'Parent', ud.fig );
	ud.colormap = uimenu( ud.cmnu, 'Label', '&Colormap');
	ud.alpha = uimenu( ud.cmnu, 'Label', '&Transparency');
	colormaps = { ...
		'hsv','hot','gray','bone','copper','pink','white','flag', ...
		'lines','colorcube','vga','jet','prism','cool','autumn', ...
		'spring','winter','summer'};
	for i = 1 : length(colormaps)
		uimenu( ud.colormap, ...
			'Label',			['&', char(i + 64 ), ' - ',colormaps{i}], ...
			'UserData',			colormaps{i}, ...
			'Callback',			'colormap(get(gcbo, ''UserData''))')
	end
	for i = 0 : 10
		switch i
		case 0
			uimenu( ud.alpha, ...
				'Label',			'&Clear ', ...
				'Callback',			'alpha(''clear'')')
		case 10
			uimenu( ud.alpha, ...
				'Label',			'&Opaque ', ...
				'UserData',			i/10, ...
				'Callback',			'alpha(''opaque'')')
		otherwise
			uimenu( ud.alpha, ...
				'Label',			['&', num2str(i), ' - Alpha ',num2str(i/10)], ...
				'UserData',			i/10, ...
				'Callback',			'alpha(get(gcbo, ''UserData''))')
		end
	end
	%%%%2D - FR
	ud.fr = axes( ...
		'Units',			'pixel', ...
		'Position',			[35 250 220 220], ...
		'Color',			'k', ...
		'DrawMode',			'fast', ...
		'XGrid',			'on', ...
		'YGrid',			'on', ...
		'FontSize',			8);
	[f1,f2]=freqspace(48);
	ud.hsurf= surf(f1, f2, zeros(48));
	title('\bf\fontsize{9}2-D Frequency Response')
	xlabel('\bfFrequency_x')
	ylabel('\bfFrequency_y')
	zlabel('\bfMagnitude')

	set(ud.hsurf, ...
		'EdgeAlpha',		0.2, ...
		'FaceAlpha',		0.6, ...
		'EraseMode',		'normal', ...
		'FaceColor',		'interp', ...
		'EdgeLighting',		'phong', ...
		'FaceLighting',		'phong', ...
		'CDataMapping',		'scaled', ...
		'UIContextMenu',	ud.cmnu)
	set(ud.fr, ...
		'XLim',				[-1 1], ...
		'YLim',				[-1 1], ...
		'XTick', 			[-1 -0.5 0 0.5 1], ...
		'YTick', 			[-1 -0.5 0 0.5 1])
	colormap jet
	axis square
	%%%%1D - FR
	ud.axeseq = axes( ...
		'Units',			'pixel', ...
		'Position',			[320 260 400 210], ...
		'DrawMode',			'fast', ...
		'Box',				'on', ...
		'XLim',				[0 1], ...
		'YLim',				[0 3], ...
		'XGrid',			'on', ...
		'YGrid',			'on', ...
		'FontSize',			8, ...
		'XTick',			round(linspace(0, 1, 16) * 1000) / 1000, ...
		'YTick',			linspace(0, 3, 16));
	xlabel('\bfNormalized Frequency');
	ylabel('<< Dim \bf Magnitude \rm Brighten >>');
	title('\bf\fontsize{9}1-D Frequency Response');
% 	line([0 1], [1 1], 'Color',	'k');

	ud.linecp = line( ...
		'XData',			linspace(0, 1, 16), ...
		'YData',			zeros(1, 16), ...
		'LineWidth',		1, ...
		'LineStyle',		'-', ...
		'Color', 			[0 0.5 1], ...
		'Marker', 			's', ...
		'MarkerSize',		8, ...
		'MarkerEdgeColor', 	[0 0.2 1], ...
		'MarkerFaceColor',	'none', ...
		'EraseMode',		'xor');

	ud.linefr = line( ...
		'XData',			linspace(0, 1, 16), ...
		'YData',			zeros(1, 16), ...
		'LineWidth',		2, ...
		'LineStyle',		'-', ...
		'Color', 			[1 0 0.4], ...
		'EraseMode',		'xor');

	%%%%Image Preview
	ud.preview = axes( ...
		'Units',			'pixel', ...
		'Position',			[55 35 150 150]);
	ud.img = imshow(CPREV, 'notruesize');
	set(ud.preview, ...
		'Visible',			'off', ...
		'DrawMode',			'fast')
	set(ud.img, ...
		'UserData', 		CPREV, ...
		'EraseMode',		'xor')
	%%%%UICONTROLS
	ud.chkpreview2dfr = uicontrol( ...
		'Style',			'checkbox', ...
		'Units',			'pixel', ...
		'Position',			[85 195 100 20], ...
		'String',			'Preview 2D-FR', ...
		'Value',			1, ...
		'Callback',			'imuieq(''::::cb_Preview2DFR'')');
	ud.chkpreviewimg = uicontrol( ...
		'Style',			'checkbox', ...
		'Units',			'pixel', ...
		'Position',			[85 10 100 20], ...
		'String',			'Preview image', ...
		'Value',			0, ...
		'Callback',			'imuieq(''::::cb_PreviewImage'')');
	ud.chksnaptogrid = uicontrol( ...
		'Style',			'checkbox', ...
		'Units',			'pixel', ...
		'Position',			[320 195 100 24], ...
		'String',			'Snap to grid', ...
		'Value',			0);
	ud.chknormalized = uicontrol( ...
		'Style',			'checkbox', ...
		'Units',			'pixel', ...
		'Position',			[420 195 100 24], ...
		'String',			'Normalized', ...
		'Value',			0, ...
		'Callback',			'imuieq(''::::cb_Normalized'')');
	ud.txt1 = uicontrol( ...
		'Style',			'text', ...
		'Units',			'pixel', ...
		'Position',			[520 195 100 18], ...
		'HorizontalAlignment', 'left', ...
		'String',			'Kernel size :');
	ud.popksize = uicontrol( ...
		'Style',			'popupmenu', ...
		'Units',			'pixel', ...
		'Position',			[580 197 40 18], ...
		'BackgroundColor',	'w', ...
		'String',			cellstr(num2str([11:2:41]')), ...
		'Value',			6, ...
		'Callback',			'imuieq(''::::cb_KSize'')');
	ud.txt2 = uicontrol( ...
		'Style',			'text', ...
		'Units',			'pixel', ...
		'Position',			[320 155 90 18], ...
		'HorizontalAlignment', 'right', ...
		'String',			'Design Method :');
	ud.popmethod = uicontrol( ...
		'Style',			'popupmenu', ...
		'Units',			'pixel', ...
		'Position',			[420 158 200 18], ...
		'BackgroundColor',	'w', ...
		'String',			{'Frequency transformation', ...
				'Frequency sampling', 'One-dimensional window',...
			 	'Two-dimensional window'}, ...
		'Callback',			'imuieq(''::::cb_Method'')');
	ud.txt3 = uicontrol( ...
		'Style',			'text', ...
		'Units',			'pixel', ...
		'Position',			[320 118 90 18], ...
		'HorizontalAlignment', 'right', ...
		'String',			'1-D window :', ...
		'Enable',			'off');
	ud.popwindow1 = uicontrol( ...
		'Style',			'popupmenu', ...
		'Units',			'pixel', ...
		'Position',			[420 120 100 18], ...
		'BackgroundColor',	'w', ...
		'Value',			8, ...
		'Enable',			'off', ...
		'Callback',			'imuieq(''::::cb_Window1'')', ...
		'String',			{'Bartlett';
							'Bartlett-Hanning';
							'Blackman';
							'Blackman-Harris';
							'Bohman';
							'Chebyshev';
							'Gaussian';
							'Hamming';
							'Hann';
							'Kaiser';
							'Nuttall';
							'Rectangular';
							'Tukey';
							'Triangular'});
	ud.txt4 = uicontrol( ...
		'Style',			'text', ...
		'Units',			'pixel', ...
		'Position',			[320 90 90 18], ...
		'HorizontalAlignment', 'right', ...
		'String',			'- :', ...
		'Enable',			'off');
	ud.edtpara = uicontrol( ...
		'Style',			'edit', ...
		'Units',			'pixel', ...
		'Position',			[420 90 60 20], ...
		'BackgroundColor',	'w', ...
		'HorizontalAlignment', 'left', ...
		'String',			'1', ...
		'Enable',			'off', ...
		'Callback',			'imuieq(''::::cb_Para'')');

	ud.txtinfo = uicontrol( ...
		'Style',			'text', ...
		'Units',			'pixel', ...
		'Position',			[320 10 400 18], ...
		'HorizontalAlignment', 'center', ...
		'FontWeight',		'bold', ...
		'String',			'.');
	ud.btnapply  = uicontrol( ...
		'Style',			'pushbutton', ...
		'Units',			'pixel', ...
		'Position',			[645 192 75 24 ], ...
		'FontWeight',		'bold', ...
		'String',			'Apply', ...
		'Callback',			'imuieq(''::::cb_Apply'')');
	ud.btncancel  = uicontrol( ...
		'Style',			'pushbutton', ...
		'Units',			'pixel', ...
		'Position',			[645 152 75 24 ], ...
		'FontWeight',		'bold', ...
		'String',			'Cancel', ...
		'Callback',			'imuieq(''::::cb_Cancel'')');

	ud.btnreset  = uicontrol( ...
		'Style',			'pushbutton', ...
		'Units',			'pixel', ...
		'Position',			[645 100 75 24 ], ...
		'String',			'Reset', ...
		'Callback',			'imuieq(''::::cb_Reset'')');
	ud.btnexport  = uicontrol( ...
		'Style',			'pushbutton', ...
		'Units',			'pixel', ...
		'Position',			[645 70 75 24 ], ...
		'String',			'Export...', ...
		'Callback',			'imuieq(''::::cb_Export'')');
	ud.HotPoint = [];
	ud.MouseState = 'release';
	movegui(ud.fig, 'center')
	set(ud.fig, ...
		'Visible',				'on', ...
		'UserData',				ud, ...
		'Color',				get(0, 'DefaultUIControlBackgroundColor'), ...
 		'WindowButtonMotion', 	'imuieq(''::::MouseMotion'')', ...
 		'WindowButtonDownFcn',	'imuieq(''::::MouseDown'')', ...
 		'WindowButtonUpFcn',	'imuieq(''::::MouseRelease'')', ...
		'CloseRequestFcn',		'imuieq(''::::cb_Cancel'')');

	waitfor(ud.fig, 'Visible', 'off')

	if strcmp('apply', get(ud.btnapply, 'UserData'))
		h = waitfig('Applying Equalizer');
		convkernel = get(ud.fr, 'UserData');
		if isempty(convkernel)
			convkernel = zeros(3);
		end
		CY = imfilter(CX, convkernel, 'replicate');
		delete(h)
	else
		CY = -1;
	end
	delete(ud.fig)
%=====================================================================
case '::::MouseDown'
	MouseEvent(ud, 'down')
	ud.MouseState = 'down';
	set(ud.fig, 'UserData', ud)
%=====================================================================
case '::::MouseRelease'
	MouseEvent(ud, 'release')
	ud.MouseState = 'release';
	set(ud.fig, 'UserData', ud)
%=====================================================================
case '::::MouseMotion'
	MouseEvent(ud, 'motion')
%=====================================================================
case '::::cb_PreviewImage'
	if get(ud.chkpreviewimg, 'Value')
		UpdatePreview(ud)
	else
		CX = get(ud.img, 'UserData');
		set(ud.img, 'CData', CX)
	end
%=====================================================================
case '::::cb_Preview2DFR'
	if get(ud.chkpreview2dfr, 'Value')
		UpdatePreview(ud)
	end
%=====================================================================
case '::::cb_Normalized'
	UpdatePreview(ud)
%=====================================================================
case '::::cb_KSize'
	temp = get(ud.linecp, 'YData');
	UpdateLine(ud, 1, temp(1))

%=====================================================================
case '::::cb_Method'
	if get(ud.popmethod, 'Value') == 3
		set(ud.popwindow1, 'Enable', 'on')
		set(ud.txt3, 'Enable', 'on')
		imuieq('::::cb_Window1')
		return
	else
		set(ud.popwindow1, 'Enable', 'off')
		set(ud.txt3, 'Enable', 'off')
		set(ud.txt4, 'Enable',	'off')
		set(ud.edtpara, 'Enable',	'off')
	end
	drawnow
	UpdatePreview(ud)
%=====================================================================
case '::::cb_Window1'
	set(ud.txt4, 'Enable',	'on')
	set(ud.edtpara, 'Enable',	'on')
	switch get(ud.popwindow1, 'Value')
	case 6
		set(ud.txt4, 'String',	'R : ')
	case 7
		set(ud.txt4, 'String',	'ALPHA : ')
	case 13
		set(ud.txt4, 'String',	'R : ')
	otherwise
		set(ud.txt4, 'Enable',	'off')
		set(ud.edtpara, 'Enable',	'off')
	end
	UpdatePreview(ud)
	%=====================================================================
case '::::cb_Para'
	UpdatePreview(ud)
	%=====================================================================
case '::::cb_Reset'
	set(ud.linecp, 'YData', zeros(16, 1))
	set(ud.chkpreview2dfr, 'Value', 1)
	set(ud.chkpreviewimg, 'Value', 0)
	set(ud.chksnaptogrid, 'Value', 0)
	set(ud.chknormalized, 'Value', 0)
	set(ud.popksize, 'Value', 6)
	set(ud.popmethod, 'Value', 1)

	CX = get(ud.img, 'UserData');
	set(ud.img, 'CData', CX)
	imuieq('::::cb_Method')
	temp = get(ud.linecp, 'YData');
	UpdateLine(ud, 1, temp(1))

%=====================================================================
case '::::cb_Export'
	prompt = {sprintf('Enter varaible name :\n')};
	default = {'h'};
	dlgtitle = 'Export Convoluation Kernel to Workspace';
	answer = inputdlg(prompt, dlgtitle, 1, default);
	if ~isempty(answer)
		varName = answer{1};
		if isvarname(varName)
			assignin('base', varName, get(ud.fr, 'UserData'));
		else
			prompt = sprintf(['\\bf', varName , '\\rm is not a valid varaible name. \n\n', ...
			'A valid variable name is a character string of letters, digits and', ...
    		'underscores, with length <= 31 and the first character a letter.']);
			h = errordlg(prompt, 'Curves', ...
				struct('Interpreter', 'tex', 'WindowStyle', 'modal') );
		end
	end
%=====================================================================
case '::::cb_Apply'
	set(ud.btnapply, 'Userdata', 'apply')
	set(ud.fig, 'Visible', 'off')
%=====================================================================
case '::::cb_Cancel'
	set(ud.btnapply, 'Userdata', 'cancel')
	set(ud.fig, 'Visible', 'off')
end
%=====================================================================
function MouseEvent(ud, event)
Sensitivity = 0.02;
temp = get(ud.axeseq, 'CurrentPoint');
LIM_X = get(ud.axeseq, 'XLim');
LIM_Y = get(ud.axeseq, 'YLim');
CurrentPointX = temp(1, 1);
CurrentPointY = temp(1, 2);
if all([CurrentPointX >= LIM_X(1), CurrentPointX <= LIM_X(2), ...
		CurrentPointY >= LIM_Y(1), CurrentPointY <= LIM_Y(2)])

	ThisPoint = [];
	for i = linspace(0, 1, 16)
		if abs(CurrentPointX - i) < Sensitivity
 			ThisPoint = i * 15 + 1;
 			break
 		end
	end

	switch event
	case 'down'
		if isempty(ThisPoint)
			setptr(ud.fig, 'arrow')
		else
			setptr(ud.fig, 'closedhand')
			UpdateLine(ud, ThisPoint, CurrentPointY)
		end
	case 'release'
		ud.HotPoint = [];
		if isempty(ThisPoint)
			setptr(ud.fig, 'arrow')
		else
			setptr(ud.fig, 'hand')
		end
	case 'motion'
		if strcmp(ud.MouseState, 'down')
			if isempty(ThisPoint)
				setptr(ud.fig, 'arrow')
			else
				setptr(ud.fig, 'closedhand')
			end
 			if ~isempty(ThisPoint)
				 UpdateLine(ud, ThisPoint, CurrentPointY)
			end
		else
			if isempty(ThisPoint)
				setptr(ud.fig, 'arrow')
			else
				setptr(ud.fig, 'hand')
			end
		end
	end
else
	setptr(ud.fig, 'arrow')
end

%=====================================================================
function UpdateLine(ud, ThisPoint, CurrentPointY)

temp = get(ud.linecp, 'YData');
if get(ud.chksnaptogrid, 'Value')
	CurrentPointY = round(CurrentPointY * 5) / 5;
end
temp(ThisPoint) = CurrentPointY;
set(ud.linecp, 'YData', temp);

temp1 = get(ud.popksize, 'Value');
temp2 = get(ud.popksize, 'String');
ksize = str2num(temp2{temp1}) - 1;

b = remez(ksize, get(ud.linecp, 'XData'), get(ud.linecp, 'YData'));

set(ud.linecp, 'UserData', b)
[h, w] = freqz(b,1,256);
set(ud.linefr, 'XData', linspace(0,1,256), 'YData', abs(h))
if get(ud.chkpreview2dfr, 'Value') | get(ud.chkpreviewimg, 'Value')
	UpdatePreview(ud)
end

%=====================================================================
function UpdatePreview(ud)
set(ud.txtinfo , 'String', 'Busy')
drawnow
if get(ud.popmethod, 'Value') == 1
	b = get(ud.linecp, 'UserData');
	try
		convkernel = ftrans2(b);
	catch
		set(ud.txtinfo , 'String', '')
		return
	end
else
	temp1 = get(ud.popksize, 'Value');
	temp2 = get(ud.popksize, 'String');
	ksize = str2num(temp2{temp1}) - 1;

	temp1 = get(ud.linecp, 'XData');
	temp2 = get(ud.linecp, 'YData');

	interpdata = interp1(temp1, temp2, linspace(0, 1, 512));

	[f1, f2] = freqspace(ksize);
	Hd = zeros(ksize);
	i = 0;
	for x = f1
		i = i + 1;
		j = 0;
		for y = f2
			j = j + 1;
			temp = sqrt(x ^ 2 + y ^ 2);
			if temp > 1
				temp = 1;
			end
			id = round( temp * 511 + 0.5);
			Hd(i, j) = interpdata(id);
		end
	end
	switch get(ud.popmethod, 'Value')
	case 2
		convkernel = fsamp2(Hd);
	case 3
		para = str2num(get(ud.edtpara, 'String'));
		switch get(ud.popwindow1, 'Value')
		case 1
			win = window(@bartlett, ksize);
		case 2
			win = window(@barthannwin, ksize);
		case 3
			win = window(@blackman, ksize);
		case 4
			win = window(@blackmanharris, ksize);
		case 5
			win = window(@bohmanwin, ksize);
		case 6
			win = window(@chebwin, ksize, para);
		case 7
			win = window(@gausswin, ksize, para);
		case 8
			win = window(@hamming, ksize);
		case 9
			win = window(@hann, ksize);
		case 10
			win = window(@kaiser, ksize);
		case 11
			win = window(@nuttallwin, ksize);
		case 12
			win = window(@rectwin, ksize);
		case 13
			win = window(@tukeywin, ksize, para);
		case 14
			win = window(@triang, ksize);
		end
		convkernel = fwind1(Hd, win);
	case 4
        win = fspecial('gaussian', ksize, 2);
        win = win ./ max(win(:));
		convkernel = fwind2(Hd, win);
	end
end
if get(ud.chknormalized, 'Value')
	temp = abs(sum(sum(convkernel)));
	if temp ~= 0
		convkernel = convkernel ./ temp;
	end
end
set(ud.fr, 'UserData', convkernel)

if get(ud.chkpreview2dfr, 'Value')
	[H, fx, fy] = freqz2(convkernel, [48 48]);
	set(ud.hsurf , ...
		'ZData', 	H, ...
		'CData',	H)
end
if get(ud.chkpreviewimg, 'Value')

	CX = get(ud.img, 'UserData');

	CX = imfilter(CX, convkernel, 'replicate');
	if strcmp(class(CX), 'double')
		CX(CX > 1) = 1;
		CX(CX < 0) = 0;
	end
	set(ud.img, 'CData', CX)
end

set(ud.txtinfo , 'String', '')